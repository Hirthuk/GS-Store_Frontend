- **react-router-dom**: This is used for client-side routing in React applications.
 It helps in navigating between pages without a full reload and provides features like `BrowserRouter`, `Routes`, 
 `Link`, and `useNavigate` for handling navigation.  

- **react-toastify**: This is used to show toast notifications (small pop-up messages) in a React app.
 It allows customizable success, error, and info messages with auto-dismiss and styling options.

Used in Main.js to route the pages inside the app.
 `<BrowserRouter>` in `main.js` is used to enable client-side routing in a React app. It wraps the entire application, allowing navigation between pages without a full page reload. 
 It replaces `<StrictMode>` when focusing on routing instead of React’s development warnings. 🚀

 NavLink used for navigation with "to" to route the page -- applied in navbar

Tags - Applied in cart logo and profile icon
group (Parent-Child Styling)
group is a Tailwind utility class that allows styling child elements based on the state of a parent element (like hover, focus, or active).

2️⃣ relative (Positioning)
relative is used to set an element’s position relative to its normal placement, allowing child elements to be positioned absolutely inside it.

We have implemented this using small screen navbar- We made the element absoulte of that it wil be relative to body(No other element has relative so no parent)
This make it sit on top of the elements
Use relative on the parent if you want absolute children to be positioned inside it.

UseContext -->
---

## 🧠 **React Context + useContext – Notes for My Project**

### ✅ **What is `createContext` and `useContext`?**

- `createContext()` creates a central place (called context) to store data.
- `useContext()` is a hook used to access that data from any component.

---

### 🎯 **Why We Use It**
- To **avoid prop drilling** — 
instead of passing props manually through multiple components, we make data available globally to any component.

---

### 🔧 **How I Used It in My Project**

1. **Created a Context File** (`ShopContext.js`)
   - Used `createContext()` to create `ShopContext`.
   - Made a `ShopProvider` component that wraps the entire app.
   - Inside `ShopProvider`, I added values like:
     - `products` (product data)
     - `ruppees` (currency symbol)
     - `delivery_fee` (extra fee)

2. **Wrapped App with Provider** in `main.jsx` (entry file)
   - Placed `<ShopProvider>` around `<App />` so that **all child components** can use the context data.

3. **Accessed Data with `useContext`**
   - Inside `LatestCollections.jsx`, I used `useContext(ShopContext)` to access the `products` array.
   - This gives direct access to context values — no need to pass props from parent to child.

---

### 🧩 **Key Terms Recap**

| Term              | Meaning                                                                 |
|-------------------|-------------------------------------------------------------------------|
| `createContext()` | Creates a context (data container).                                     |
| `Provider`        | Wraps components and provides them with context data.                   |
| `children`        | Represents whatever JSX is nested inside the provider.                  |
| `useContext()`    | React hook to grab data from context anywhere in the component tree.    |

---

### 📌 Example in My Project

- **Global data** like `products`, `rupees`, `delivery_fee` are needed in many places.
- So instead of passing them manually, I stored them in a context and accessed them using `useContext`.

window.scrollTo(0,0); --> This DOM Proprty is used to scroll the page to top


